package javabasics.chapter02.basic;

/**
 * Chapter 02 - 연산자 (Operators)
 * 문제 1: 산술 연산자 완전 정복
 * 
 * <h3>학습 목표:</h3>
 * <ul>
 *   <li>기본 산술 연산자 5가지 (+, -, *, /, %) 활용법 마스터</li>
 *   <li>정수 연산과 실수 연산의 차이점 이해</li>
 *   <li>연산자 우선순위와 괄호 사용법 학습</li>
 *   <li>음수 연산의 특성 파악</li>
 * </ul>
 * 
 * <h3>주요 개념:</h3>
 * <pre>
 * 1. 덧셈(+): 두 값을 더함
 * 2. 뺄셈(-): 첫 번째 값에서 두 번째 값을 뺌
 * 3. 곱셈(*): 두 값을 곱함
 * 4. 나눗셈(/): 첫 번째 값을 두 번째 값으로 나눔
 *    - 정수 나눗셈: 몫만 반환 (소수점 버림)
 *    - 실수 나눗셈: 정확한 결과 반환
 * 5. 나머지(%): 나눗셈의 나머지를 반환
 * </pre>
 * 
 * @author 자바 기초 학습
 * @version 1.0
 * @since Chapter 02
 */
public class Problem01_ArithmeticOperators {
    public static void main(String[] args) {
        /*
         * ==========================================
         * 문제 1-1: 기본 사칙연산 실습
         * ==========================================
         * 정수 변수 a와 b를 사용한 5가지 기본 연산
         * 
         * [실습 내용]
         * - 두 정수의 기본 산술 연산 결과 확인
         * - 정수 나눗셈의 특징 관찰 (소수점 버림)
         * - 나머지 연산의 활용 예시
         */
        int a = 10;  // 피연산자 1
        int b = 3;   // 피연산자 2
        
        // 다섯 가지 산술 연산 수행
        System.out.println("a + b = " + (a + b));
        System.out.println("a - b = " + (a - b));
        System.out.println("a * b = " + (a * b));
        System.out.println("a / b = " + (a / b));
        System.out.println("a % b = " + (a % b));
        
        /*
         * ==========================================
         * 문제 1-2: 실수 나눗셈의 정밀도
         * ==========================================
         * double 타입을 사용한 정확한 나눗셈 연산
         * 
         * [핵심 포인트]
         * - 정수 나눗셈: 10 / 3 = 3 (소수점 버림)
         * - 실수 나눗셈: 10.0 / 3.0 = 3.333... (정확한 결과)
         * 
         * 💡 TIP: 정확한 계산이 필요할 때는 double 사용!
         */
        double x = 10.0;  // 실수형 피연산자 1
        double y = 3.0;   // 실수형 피연산자 2
        
        // 실수 나눗셈 수행 (소수점 포함 결과)
        System.out.println("\nx / y = " + (x / y));
        
        /*
         * ==========================================
         * 문제 1-3: 연산자 우선순위 이해하기
         * ==========================================
         * 복합 수식에서 연산 순서 파악하기
         * 
         * [연산자 우선순위]
         * 1순위: *, /, % (곱셈, 나눗셈, 나머지)
         * 2순위: +, - (덧셈, 뺄셈)
         * 
         * [계산 과정]
         * 10 + 20 * 3 - 5 / 2
         * = 10 + (20 * 3) - (5 / 2)
         * = 10 + 60 - 2
         * = 68
         * 
         * 💡 TIP: 같은 우선순위는 왼쪽에서 오른쪽 순서로!
         */
        int result = 10 + 20 * 3 - 5 / 2;  // 복합 연산식
        System.out.println("\n연산 우선순위 결과: " + result);
        
        /*
         * ==========================================
         * 문제 1-4: 괄호로 연산 순서 제어하기
         * ==========================================
         * 괄호를 사용하여 원하는 순서로 연산 수행
         * 
         * [계산 과정]
         * (10 + 20) * (3 - 5) / 2
         * = 30 * (-2) / 2
         * = -60 / 2
         * = -30
         * 
         * ⚠️ 주의: 괄호는 항상 최우선으로 계산됩니다!
         * 
         * 💡 TIP: 복잡한 수식은 괄호로 명확하게 표현하세요
         */
        int result2 = (10 + 20) * (3 - 5) / 2;  // 괄호로 순서 변경
        System.out.println("괄호 사용 결과: " + result2);
        
        /*
         * ==========================================
         * 문제 1-5: 음수가 포함된 연산
         * ==========================================
         * 음수와 양수의 연산 규칙 이해하기
         * 
         * [음수 연산 규칙]
         * - 양수 × 양수 = 양수
         * - 양수 × 음수 = 음수
         * - 음수 × 음수 = 양수
         * - 나눗셈도 동일한 규칙 적용
         * 
         * 📌 실생활 예시: 온도 변화, 손익 계산 등
         */
        int negative = -5;   // 음수
        int positive = 10;   // 양수
        
        // 음수와 양수의 곱셈, 나눗셈 결과 확인
        System.out.println("\n음수 * 양수 = " + (negative * positive));
        System.out.println("음수 / 양수 = " + (negative / positive));
    }
}