package main.java.javabasics.chapter02_operators.advanced;

/**
 * Chapter 02 - 연산자 (Operators) - 고급
 * 연습문제 2: 삼항 연산자 심화 학습
 * 
 * <h3>학습 목표:</h3>
 * <ul>
 *   <li>삼항 연산자의 기본 문법과 동작 원리 이해</li>
 *   <li>중첩 삼항 연산자의 올바른 사용법 습득</li>
 *   <li>if-else문과 삼항 연산자의 차이점 파악</li>
 *   <li>실무에서의 효과적인 활용 패턴 학습</li>
 * </ul>
 * 
 * <h3>삼항 연산자 문법:</h3>
 * <pre>
 * 조건식 ? 참일때_값 : 거짓일때_값
 * 
 * 예시:
 * int max = (a > b) ? a : b;
 * </pre>
 * 
 * <h3>💡 삼항 연산자의 장점:</h3>
 * <ul>
 *   <li>간결한 코드 작성 가능</li>
 *   <li>변수 초기화 시 유용</li>
 *   <li>함수형 프로그래밍 스타일 지원</li>
 *   <li>표현식으로 사용 가능 (값을 반환)</li>
 * </ul>
 * 
 * <h3>⚠️ 주의사항:</h3>
 * <ul>
 *   <li>과도한 중첩은 가독성을 해침</li>
 *   <li>복잡한 로직은 if-else문 사용 권장</li>
 *   <li>반환 타입이 일치해야 함</li>
 *   <li>부작용(side effect)이 있는 표현식 주의</li>
 * </ul>
 * 
 * <h3>🔍 if-else vs 삼항 연산자:</h3>
 * <table border="1">
 *   <tr><th>구분</th><th>if-else문</th><th>삼항 연산자</th></tr>
 *   <tr><td>용도</td><td>복잡한 분기 처리</td><td>간단한 값 선택</td></tr>
 *   <tr><td>형태</td><td>문장(statement)</td><td>표현식(expression)</td></tr>
 *   <tr><td>가독성</td><td>복잡한 로직에 적합</td><td>간단한 조건에 적합</td></tr>
 *   <tr><td>중첩</td><td>권장</td><td>2단계 이상 비권장</td></tr>
 * </table>
 * 
 * @author XIYO
 * @version 1.0
 * @since 2025-07-15
 */
public class Exercise02_TernaryOperator {
    public static void main(String[] args) {
        /*
         * ==========================================
         * 문제 2-1: 기본 삼항 연산자
         * ==========================================
         * 가장 기본적인 삼항 연산자 사용법
         * 
         * [구조]
         * (조건) ? 참일때_값 : 거짓일때_값
         * 
         * [동작]
         * age >= 18이 true이므로 "성인" 반환
         * 
         * 📌 활용: 단순한 조건부 문자열 할당, 상태 표시
         */
        int age = 20;
        String status = (age >= 18) ? "성인" : "미성년자";
        System.out.println("나이: " + age + ", 상태: " + status);
        
        /*
         * ==========================================
         * 문제 2-2: 삼항 연산자로 최대값 구하기
         * ==========================================
         * Math.max() 없이 두 수의 최대값 구하기
         * 
         * [동작 분석]
         * x(15) > y(23) ? x : y
         * = false ? 15 : 23
         * = 23
         * 
         * 💡 삼항 연산자 vs Math.max():
         * - 삼항 연산자: 두 값만 비교 가능
         * - Math.max(): 여러 값 비교에 유리
         */
        int x = 15;
        int y = 23;
        int max = (x > y) ? x : y;
        System.out.println("\n" + x + "과 " + y + " 중 큰 값: " + max);
        
        /*
         * ==========================================
         * 문제 2-3: 중첩 삼항 연산자
         * ==========================================
         * 여러 조건을 연속적으로 판단하는 방법
         * 
         * [학점 부여 로직]
         * 90점 이상: A
         * 80점 이상: B
         * 70점 이상: C
         * 60점 이상: D
         * 60점 미만: F
         * 
         * ⚠️ 주의: 가독성을 위해 들여쓰기 필수
         * 💡 대안: switch 표현식(자바 14+) 또는 if-else문
         */
        int score = 85;
        String grade = (score >= 90) ? "A" :
                      (score >= 80) ? "B" :
                      (score >= 70) ? "C" :
                      (score >= 60) ? "D" : "F";
        System.out.println("\n점수: " + score + ", 학점: " + grade);
        
        /*
         * ==========================================
         * 문제 2-4: 삼항 연산자로 절대값 구하기
         * ==========================================
         * Math.abs() 없이 절대값 계산
         * 
         * [절대값 로직]
         * - 음수면: 부호 반전 (-num)
         * - 양수면: 그대로 사용 (num)
         * 
         * 📌 실무 활용: 간단한 수학 연산, 좌표 계산
         */
        int num = -5;
        int absValue = (num < 0) ? -num : num;
        System.out.println("\n" + num + "의 절대값: " + absValue);
        
        /*
         * ==========================================
         * 문제 2-5: 삼항 연산자로 문자열 처리
         * ==========================================
         * null 체크와 빈 문자열 확인을 한 번에
         * 
         * [조건 검사]
         * 1. name != null : null 체크
         * 2. !name.isEmpty() : 빈 문자열 체크
         * 
         * 💡 && 연산자의 단락 평가:
         * - name이 null이면 isEmpty() 호출 안함
         * - NullPointerException 방지
         * 
         * 🎯 실무: 사용자 인사말, 기본값 설정
         */
        String name = "김철수";
        String greeting = (name != null && !name.isEmpty()) ? 
                         "안녕하세요, " + name + "님!" : 
                         "안녕하세요, 손님!";
        System.out.println("\n" + greeting);
        
        /*
         * ==========================================
         * 문제 2-6: 복잡한 조건의 삼항 연산자
         * ==========================================
         * 시간대별 인사말 결정
         * 
         * [시간대 분류]
         * 06:00 ~ 11:59 : 오전
         * 12:00 ~ 17:59 : 오후
         * 18:00 ~ 21:59 : 저녁
         * 22:00 ~ 05:59 : 밤
         * 
         * 🌅 활용: 시간대별 인사, 알람 설정, UI 테마
         */
        int hour = 14;
        String timeOfDay = (hour >= 6 && hour < 12) ? "오전" :
                          (hour >= 12 && hour < 18) ? "오후" :
                          (hour >= 18 && hour < 22) ? "저녁" : "밤";
        System.out.println("\n현재 시간: " + hour + "시, " + timeOfDay);
        
        /*
         * ==========================================
         * 문제 2-7: 삼항 연산자와 복합 할당
         * ==========================================
         * 삼항 연산자의 결과를 복합 할당 연산에 사용
         * 
         * [동작 과정]
         * 1. (a > b) ? a : b → 20 반환
         * 2. result += 20 → result = 0 + 20 = 20
         * 
         * 💡 활용: 조건부 누적, 최댓값 갱신
         */
        int a = 10, b = 20;
        int result = 0;
        result += (a > b) ? a : b;  // 큰 값을 result에 더하기
        System.out.println("\nresult = " + result);
        
        /*
         * ==========================================
         * 문제 2-8: 타입이 다른 경우의 삼항 연산자
         * ==========================================
         * 조건부 할인 적용 예제
         * 
         * [할인 로직]
         * - 주말: 20% 할인 (price * 0.8)
         * - 평일: 정가 (price)
         * 
         * 💰 실무 활용:
         * - 동적 가격 책정
         * - 회원 등급별 할인
         * - 이벤트 기간 할인
         */
        boolean isWeekend = true;
        double price = 100.0;
        double finalPrice = isWeekend ? price * 0.8 : price;  // 주말 20% 할인
        System.out.println("\n주말 할인 적용: " + finalPrice + "원");
        
        /*
         * ==========================================
         * 문제 2-9: 삼항 연산자를 사용한 유효성 검사
         * ==========================================
         * null 안전 처리를 위한 삼항 연산자
         * 
         * [null 처리 패턴]
         * - input이 null이면: 0 반환
         * - input이 null이 아니면: 길이 반환
         * 
         * 🔒 NullPointerException 방지
         * 💡 Java 8+: Optional 클래스 활용 가능
         */
        String input = "hello";
        int length = (input != null) ? input.length() : 0;
        System.out.println("\n문자열 길이: " + length);
        
        /*
         * ==========================================
         * 문제 2-10: 실전 예제 - 윤년 판별
         * ==========================================
         * 복잡한 조건과 삼항 연산자의 조합
         * 
         * [윤년 규칙]
         * 1. 4로 나누어 떨어지면 윤년
         * 2. 단, 100으로 나누어 떨어지면 평년
         * 3. 단, 400으로 나누어 떨어지면 윤년
         * 
         * 📅 예시: 2024년(윤년), 2100년(평년), 2000년(윤년)
         * 
         * 🎯 활용: 달력 처리, 날짜 계산
         */
        int year = 2024;
        boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
        String message = isLeapYear ? year + "년은 윤년입니다." : year + "년은 평년입니다.";
        System.out.println("\n" + message);
        
        /*
         * ==========================================
         * 문제 2-11: 삼항 연산자 체이닝
         * ==========================================
         * 다단계 조건 판단을 위한 연속 삼항 연산자
         * 
         * [온도별 날씨 분류]
         * 30°C 초과: 매우 더움
         * 20~30°C: 따뜻함
         * 10~20°C: 선선함
         * 0~10°C: 추움
         * 0°C 이하: 매우 추움
         * 
         * ⚠️ 경고: 과도한 체이닝은 가독성 저하
         * 💡 대안: if-else if 문 사용 권장
         * 
         * 🌡️ 활용: 날씨 앱, IoT 온도 센서, 에어컨 제어
         */
        int temperature = 25;
        String weather = temperature > 30 ? "매우 더움" :
                        temperature > 20 ? "따뜻함" :
                        temperature > 10 ? "선선함" :
                        temperature > 0 ? "추움" : "매우 추움";
        System.out.println("\n온도: " + temperature + "°C, 날씨: " + weather);
    }
}