package main.java.javabasics.chapter02_operators.basic;

/**
 * Chapter 02 - 연산자 (Operators)
 * 연습문제 4: 대입 연산자 완벽 마스터
 * 
 * <h3>학습 목표:</h3>
 * <ul>
 *   <li>기본 대입 연산자(=)의 이해와 활용</li>
 *   <li>복합 대입 연산자(+=, -=, *=, /=, %=) 완벽 습득</li>
 *   <li>연쇄 대입과 문자열 연결 대입 학습</li>
 *   <li>비트 연산 복합 대입 연산자 이해</li>
 * </ul>
 * 
 * <h3>대입 연산자 종류:</h3>
 * <table border="1">
 *   <tr><th>연산자</th><th>의미</th><th>예시</th></tr>
 *   <tr><td>=</td><td>단순 대입</td><td>x = 10</td></tr>
 *   <tr><td>+=</td><td>더한 후 대입</td><td>x += 5 (x = x + 5)</td></tr>
 *   <tr><td>-=</td><td>뺀 후 대입</td><td>x -= 3 (x = x - 3)</td></tr>
 *   <tr><td>*=</td><td>곱한 후 대입</td><td>x *= 2 (x = x * 2)</td></tr>
 *   <tr><td>/=</td><td>나눈 후 대입</td><td>x /= 4 (x = x / 4)</td></tr>
 *   <tr><td>%=</td><td>나머지 후 대입</td><td>x %= 3 (x = x % 3)</td></tr>
 * </table>
 * 
 * <h3>💡 핵심 포인트:</h3>
 * <ul>
 *   <li>복합 대입 연산자는 코드를 간결하게 만들어줍니다</li>
 *   <li>연산과 대입을 한 번에 처리하여 성능상 이점이 있습니다</li>
 *   <li>가독성이 높아 실무에서 자주 사용됩니다</li>
 * </ul>
 * 
 * @author XIYO
 * @version 1.0
 * @since 2025-07-15
 */
public class Exercise04_AssignmentOperators {
    public static void main(String[] args) {
        /*
         * ==========================================
         * 문제 4-1: 기본 대입 연산자 (=)
         * ==========================================
         * 가장 기본적인 대입 연산자로 오른쪽 값을 왼쪽 변수에 저장
         * 
         * [주의사항]
         * - 오른쪽에서 왼쪽으로 대입
         * - 비교 연산자(==)와 혼동 주의
         * 
         * 📌 실생활 예시: 변수 초기화, 값 갱신
         */
        // TODO: 정수 변수 x를 선언하고 10으로 초기화하세요
        // int x = 10;
        // System.out.println("초기값 x = " + x);
        
        /*
         * ==========================================
         * 문제 4-2: 복합 대입 연산자
         * ==========================================
         * 연산과 대입을 한 번에 처리하는 효율적인 연산자
         * 
         * [계산 과정 추적]
         * x = 10 (초기값)
         * x += 5  →  x = 10 + 5 = 15
         * x -= 3  →  x = 15 - 3 = 12
         * x *= 2  →  x = 12 * 2 = 24
         * x /= 4  →  x = 24 / 4 = 6
         * x %= 3  →  x = 6 % 3 = 0
         * 
         * 💡 TIP: 복합 대입 연산자는 코드를 간결하게 만듭니다
         */
        // TODO: 복합 대입 연산자를 사용하여 x에 5를 더하세요
        // x += 5;  // x = x + 5
        // System.out.println("x += 5 결과: " + x);
        
        // TODO: x에서 3을 빼세요
        // x -= 3;  // x = x - 3
        // System.out.println("x -= 3 결과: " + x);
        
        // TODO: x에 2를 곱하세요
        // x *= 2;  // x = x * 2
        // System.out.println("x *= 2 결과: " + x);
        
        // TODO: x를 4로 나누세요
        // x /= 4;  // x = x / 4
        // System.out.println("x /= 4 결과: " + x);
        
        // TODO: x를 3으로 나눈 나머지를 구하세요
        // x %= 3;  // x = x % 3
        // System.out.println("x %= 3 결과: " + x);
        
        /*
         * ==========================================
         * 문제 4-3: 연쇄 대입 (Chain Assignment)
         * ==========================================
         * 하나의 값을 여러 변수에 동시에 대입
         * 
         * [실행 순서]
         * a = b = c = 100
         * → c = 100
         * → b = c (100)
         * → a = b (100)
         * 
         * ⚠️ 주의: 오른쪽부터 왼쪽으로 평가
         * 📌 활용 예시: 여러 변수 초기화, 동일한 기본값 설정
         */
        // TODO: 세 개의 정수 변수 a, b, c를 선언하세요
        // int a, b, c;
        
        // TODO: 연쿄 대입을 사용하여 모두 100으로 설정하세요
        // a = b = c = 100;
        // System.out.println("\na = " + a + ", b = " + b + ", c = " + c);
        
        /*
         * ==========================================
         * 문제 4-4: 문자열 연결 복합 대입
         * ==========================================
         * += 연산자를 사용한 문자열 연결
         * 
         * [동작 과정]
         * str = "Hello"
         * str += " "     → str = "Hello" + " " = "Hello "
         * str += "World" → str = "Hello " + "World" = "Hello World"
         * 
         * 💡 TIP: StringBuilder를 사용하면 더 효율적
         * 📌 활용 예시: 동적 문자열 생성, 로그 메시지 구성
         */
        // TODO: 문자열 변수 str을 "Hello"로 초기화하세요
        // String str = "Hello";
        
        // TODO: += 연산자를 사용하여 공백을 추가하세요
        // str += " ";
        
        // TODO: "World"를 추가하세요
        // str += "World";
        // System.out.println("\n문자열 연결: " + str);
        
        /*
         * ==========================================
         * 문제 4-5: 실전 예제 - 은행 계좌 시뮬레이션
         * ==========================================
         * 복합 대입 연산자를 활용한 금융 거래 처리
         * 
         * [거래 내역]
         * 1. 초기 잔액: $1000.00
         * 2. 입금 (+$500): $1500.00
         * 3. 출금 (-$200): $1300.00
         * 4. 이자 (10%): $1430.00
         * 
         * 🎯 학습 포인트:
         * - += : 입금 처리
         * - -= : 출금 처리
         * - *= : 이자율 적용
         * 
         * ⚠️ 실무 TIP: 금액 계산은 BigDecimal 사용 권장
         */
        // TODO: 은행 잔액 변수를 1000.0으로 초기화하세요
        // double balance = 1000.0;
        // System.out.println("\n초기 잔액: $" + balance);
        
        // TODO: 500.0을 입금하세요 (복합 대입 연산자 사용)
        // balance += 500.0;
        // System.out.println("$500 입금 후: $" + balance);
        
        // TODO: 200.0을 출금하세요
        // balance -= 200.0;
        // System.out.println("$200 출금 후: $" + balance);
        
        // TODO: 10% 이자를 적용하세요 (1.1을 곱하기)
        // balance *= 1.1;
        // System.out.println("10% 이자 적용 후: $" + balance);
        
        /*
         * ==========================================
         * 문제 4-6: 비트 연산 복합 대입
         * ==========================================
         * 고급 주제: 비트 단위 연산과 복합 대입
         * 
         * [비트 연산 과정]
         * bits = 8 (1000₂)
         * bits <<= 1  →  16 (10000₂)  // 2배 곱하기
         * bits >>= 2  →  4  (100₂)     // 4로 나누기
         * bits &= 3   →  0  (000₂)     // 3(11₂)과 AND
         * 
         * [비트 연산 복합 대입]
         * - <<=  : 왼쪽 시프트 후 대입
         * - >>=  : 오른쪽 시프트 후 대입
         * - &=   : AND 연산 후 대입
         * - |=   : OR 연산 후 대입
         * - ^=   : XOR 연산 후 대입
         * 
         * 📈 활용: 플래그 처리, 성능 최적화, 암호화
         */
        // TODO: 비트 연산을 위한 변수를 8로 초기화하세요
        // int bits = 8;  // 1000 in binary
        // System.out.println("\n초기 비트값: " + bits);
        
        // TODO: 왼쪽으로 1비트 시프트하세요
        // bits <<= 1;  // 왼쪽 시프트
        // System.out.println("bits <<= 1 결과: " + bits);
        
        // TODO: 오른쪽으로 2비트 시프트하세요
        // bits >>= 2;  // 오른쪽 시프트
        // System.out.println("bits >>= 2 결과: " + bits);
        
        // TODO: 3과 AND 연산을 수행하세요
        // bits &= 3;   // AND 연산
        // System.out.println("bits &= 3 결과: " + bits);
    }
}