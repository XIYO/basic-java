{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 구조 및 개발 환경 설정",
        "description": "Spring Boot 기반의 Java 프로젝트 초기 설정과 필요한 의존성 구성",
        "details": "Spring Boot 3.x 프로젝트 생성, PostgreSQL 데이터베이스 설정, Docker 환경 구성. 필요한 의존성: Spring Web, Spring Data JPA, PostgreSQL Driver, Spring Security, Lombok, Jackson. application.yml 설정 파일에 데이터베이스 연결 정보, Docker 컨테이너 설정, 보안 설정 추가. Maven/Gradle 빌드 구성.",
        "testStrategy": "프로젝트가 정상적으로 빌드되고 실행되는지 확인. 데이터베이스 연결 테스트. Docker 컨테이너가 정상 작동하는지 검증. 기본 Spring Boot 애플리케이션 컨텍스트 로드 테스트.",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Spring Boot 3.x 프로젝트 생성 및 기본 구조 설정",
            "description": "Spring Initializr를 통한 프로젝트 생성, 기본 패키지 구조 생성, 메인 애플리케이션 클래스 설정 [Updated: 7/15/2025]",
            "dependencies": [],
            "details": "Spring Boot 3.x 버전으로 새 프로젝트 생성. Java 17 설정. 기본 패키지 구조 (controller, service, repository, entity, config) 생성. Application.java 메인 클래스 작성. Gradle 또는 Maven 빌드 설정.\n<info added on 2025-07-15T05:18:22.898Z>\n프로젝트 구조를 순수 Java로 재구성. Main.java 메인 클래스로 변경. 패키지 구조를 교육용으로 단순화 (problems, solutions, hints, utils). 콘솔 입출력을 위한 Scanner 기반 인터페이스 구현. 문제 데이터를 Java 클래스로 관리하도록 설계. 외부 의존성 없이 JDK만으로 실행 가능한 구조로 설정.\n</info added on 2025-07-15T05:18:22.898Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "필수 의존성 구성 및 빌드 설정",
            "description": "Spring Web, Spring Data JPA, PostgreSQL Driver, Spring Security, Lombok, Jackson 등 필요한 의존성 추가",
            "dependencies": [
              1
            ],
            "details": "build.gradle 또는 pom.xml에 필수 의존성 추가: spring-boot-starter-web, spring-boot-starter-data-jpa, postgresql, spring-boot-starter-security, lombok, jackson. 버전 호환성 확인 및 의존성 충돌 해결.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "데이터베이스 연결 설정 및 JPA 구성",
            "description": "PostgreSQL 데이터베이스 연결 설정, JPA 설정, 데이터베이스 스키마 자동 생성 구성",
            "dependencies": [
              2
            ],
            "details": "application.yml 파일에 PostgreSQL 연결 정보 설정. JPA 설정: ddl-auto, show-sql, dialect 구성. 데이터베이스 연결 테스트. HikariCP 커넥션 풀 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Docker 환경 구성 및 컨테이너 설정",
            "description": "Dockerfile 작성, Docker Compose 구성, PostgreSQL 컨테이너 설정",
            "dependencies": [
              1
            ],
            "details": "Spring Boot 애플리케이션용 Dockerfile 작성 (OpenJDK 17 기반). docker-compose.yml 파일로 PostgreSQL 컨테이너와 애플리케이션 컨테이너 구성. 네트워크 설정 및 볼륨 마운트 구성.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "애플리케이션 설정 파일 작성 및 프로파일 구성",
            "description": "개발/운영 환경별 설정 파일 작성, 로깅 설정, 보안 기본 설정",
            "dependencies": [
              3
            ],
            "details": "application.yml, application-dev.yml, application-prod.yml 작성. 로깅 레벨 및 패턴 설정. CORS 설정. Spring Security 기본 설정. 환경변수를 통한 설정값 외부화.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "문제 데이터 모델 및 데이터베이스 스키마 설계",
        "description": "Problem, TestCase, UserProgress 등 핵심 엔티티 정의 및 데이터베이스 테이블 생성",
        "details": "JPA 엔티티 클래스 작성: @Entity Problem (id, title, description, category, hints List<String>, starterCode, testCases List<TestCase>, solution, difficulty), @Entity TestCase (input, expectedOutput, isHidden), @Entity UserProgress (userId, attempts Map, categoryScores Map), @Entity ProblemAttempt (problemId, codeSubmissions List, hintsUsed, solved, timeSpent). PostgreSQL 테이블 자동 생성 설정. 인덱스 및 제약조건 설정.",
        "testStrategy": "JPA 리포지토리 테스트로 CRUD 작업 검증. 데이터베이스 스키마가 올바르게 생성되는지 확인. 연관관계 매핑 테스트. 샘플 데이터 삽입 및 조회 테스트.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Problem 엔티티 설계 및 구현",
            "description": "문제 정보를 저장하는 Problem 엔티티를 JPA로 설계하고 구현합니다",
            "dependencies": [],
            "details": "@Entity Problem 클래스 생성 (id, title, description, category, hints List<String>, starterCode, solution, difficulty 필드). @Id @GeneratedValue 설정. @Column 제약조건 정의 (NOT NULL, 길이 제한). @Enumerated로 난이도 타입 매핑. @ElementCollection으로 힌트 리스트 매핑.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "TestCase 엔티티 설계 및 구현",
            "description": "문제의 테스트 케이스를 저장하는 TestCase 엔티티를 설계하고 구현합니다",
            "dependencies": [
              1
            ],
            "details": "@Entity TestCase 클래스 생성 (id, input, expectedOutput, isHidden 필드). Problem과의 @ManyToOne 연관관계 설정. @JoinColumn으로 외래키 매핑. 숨겨진 테스트케이스 구분을 위한 boolean 필드 추가.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "UserProgress 엔티티 설계 및 구현",
            "description": "사용자의 학습 진행 상황을 추적하는 UserProgress 엔티티를 설계하고 구현합니다",
            "dependencies": [],
            "details": "@Entity UserProgress 클래스 생성 (id, userId, totalAttempts, solvedProblems, categoryScores Map 필드). @ElementCollection으로 카테고리별 점수 맵 매핑. JSON 형태로 복잡한 진행 상황 데이터 저장을 위한 @Convert 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "ProblemAttempt 엔티티 설계 및 구현",
            "description": "문제 풀이 시도 기록을 저장하는 ProblemAttempt 엔티티를 설계하고 구현합니다",
            "dependencies": [
              1,
              3
            ],
            "details": "@Entity ProblemAttempt 클래스 생성 (id, problemId, userId, submittedCode, hintsUsed, solved, timeSpent, submitTime 필드). Problem과 UserProgress와의 연관관계 설정. @Temporal로 시간 데이터 매핑. 인덱스 최적화를 위한 복합키 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "엔티티 간 연관관계 매핑 구현",
            "description": "설계된 모든 엔티티 간의 연관관계를 정확히 매핑하고 구현합니다",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Problem과 TestCase 간 @OneToMany 양방향 매핑. cascade 옵션 설정. fetch 전략 최적화 (LAZY vs EAGER). orphanRemoval 설정. @JoinTable을 사용한 다대다 관계가 필요한 경우 처리. 순환 참조 방지를 위한 @JsonIgnore 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "데이터베이스 스키마 최적화 및 인덱스 설정",
            "description": "성능 최적화를 위한 데이터베이스 스키마 조정 및 인덱스 생성",
            "dependencies": [
              5
            ],
            "details": "자주 조회되는 필드에 @Index 설정 (Problem.category, Problem.difficulty, ProblemAttempt.userId 등). 복합 인덱스 생성. application.yml에서 hibernate.hbm2ddl.auto 설정. 데이터베이스 제약조건 추가 (@UniqueConstraint). 성능 테스트를 위한 더미 데이터 생성 스크립트 작성.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "보안 코드 실행 환경 구축",
        "description": "Docker 기반의 격리된 Java 코드 실행 환경 구현",
        "details": "Docker 이미지 생성 (OpenJDK 17 기반). 코드 실행용 컨테이너 설정: 메모리 제한 (256MB), CPU 제한 (0.5 core), 실행 시간 제한 (5초), 네트워크 격리, 파일시스템 읽기 전용. Java Security Manager 설정. ProcessBuilder를 통한 Java 컴파일 및 실행. 표준 입출력 스트림 처리.",
        "testStrategy": "악의적인 코드 (무한루프, 시스템 호출, 파일 접근) 실행 시 안전하게 차단되는지 검증. 리소스 제한이 적용되는지 테스트. 정상 코드가 올바르게 실행되고 결과를 반환하는지 확인.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Docker 기반 Java 실행 환경 이미지 생성",
            "description": "OpenJDK 17 기반의 보안 강화된 Docker 이미지를 생성하고 기본 보안 설정을 구성",
            "dependencies": [],
            "details": "OpenJDK 17 Alpine 이미지를 베이스로 하여 최소한의 패키지만 포함된 컨테이너 이미지 생성. 불필요한 시스템 도구 제거, 읽기 전용 파일시스템 설정, 비특권 사용자 계정 생성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "컨테이너 리소스 제한 설정",
            "description": "메모리, CPU, 실행 시간 제한을 적용하여 리소스 남용을 방지하는 설정 구현",
            "dependencies": [
              1
            ],
            "details": "Docker 런타임 옵션으로 메모리 256MB 제한, CPU 0.5 core 제한, 실행 시간 5초 타임아웃 설정. ulimit을 통한 프로세스 수 제한, 디스크 쓰기 제한 구성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "네트워크 격리 구성",
            "description": "컨테이너의 네트워크 접근을 차단하고 외부 통신을 완전히 격리",
            "dependencies": [
              1
            ],
            "details": "Docker 네트워크 none 모드 설정으로 모든 네트워크 인터페이스 비활성화. iptables 규칙으로 추가 네트워크 차단. 로컬호스트 접근만 허용하는 최소 권한 네트워크 정책 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Java Security Manager 설정",
            "description": "Java Security Manager를 통해 시스템 리소스 접근을 제한하는 보안 정책 구현",
            "dependencies": [
              1
            ],
            "details": "restrictive security policy 파일 생성으로 파일 시스템 접근, 네트워크 호출, 시스템 프로퍼티 변경, 리플렉션 사용을 차단. SecurityManager 활성화 JVM 옵션 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "ProcessBuilder 기반 코드 실행 엔진 구현",
            "description": "Java 코드 컴파일 및 실행을 안전하게 처리하는 ProcessBuilder 기반 실행 엔진 개발",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "ProcessBuilder로 javac 컴파일과 java 실행 프로세스 관리. 작업 디렉토리 격리, 환경 변수 제한, 프로세스 타임아웃 처리. 컴파일 오류와 런타임 오류 구분하여 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "입출력 스트림 처리 시스템",
            "description": "표준 입출력 스트림을 안전하게 캡처하고 처리하는 시스템 구현",
            "dependencies": [
              5
            ],
            "details": "BufferedReader로 stdout/stderr 스트림 비동기 처리. 출력 크기 제한(10KB), 버퍼 오버플로우 방지. 실시간 출력 캡처와 에러 메시지 파싱 기능 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "보안 테스트 및 검증",
            "description": "악의적인 코드와 정상 코드에 대한 포괄적인 보안 테스트 수행",
            "dependencies": [
              6
            ],
            "details": "무한루프, 시스템 호출, 파일 접근, 네트워크 호출 등 악의적 코드 차단 테스트. 메모리 폭탄, CPU 과부하 공격 방어 검증. 정상적인 Java 코드의 올바른 실행과 출력 반환 확인",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "React 기반 웹 인터페이스 개발",
        "description": "Monaco Editor를 활용한 코드 편집기와 문제 표시 UI 구현",
        "details": "Create React App으로 프로젝트 생성. Monaco Editor 통합 (Java 문법 강조, 자동 들여쓰기, 괄호 매칭). 레이아웃 구성: 좌측 문제 설명 패널, 우측 코드 에디터, 하단 테스트 결과 패널. Material-UI 또는 Ant Design으로 UI 구성. 반응형 디자인 구현. API 통신을 위한 Axios 설정.",
        "testStrategy": "컴포넌트 단위 테스트 (React Testing Library). 코드 에디터에서 Java 문법 강조가 작동하는지 확인. 반응형 레이아웃이 다양한 화면 크기에서 정상 작동하는지 테스트. API 호출 모킹 테스트.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "React 프로젝트 초기 설정 및 구조 구성",
            "description": "Create React App으로 새 프로젝트를 생성하고 기본 폴더 구조를 설정합니다",
            "dependencies": [],
            "details": "npx create-react-app으로 프로젝트 생성, src/components, src/pages, src/services, src/hooks 폴더 구조 생성, 불필요한 기본 파일 정리, package.json 설정 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Monaco Editor 설치 및 기본 통합",
            "description": "Monaco Editor 패키지를 설치하고 React 컴포넌트로 통합합니다",
            "dependencies": [
              1
            ],
            "details": "@monaco-editor/react 패키지 설치, CodeEditor 컴포넌트 생성, Java 언어 지원 설정, 기본 에디터 옵션 구성 (테마, 폰트 크기, 탭 설정)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "반응형 레이아웃 컴포넌트 구현",
            "description": "좌측 문제 패널, 우측 에디터, 하단 결과 패널로 구성된 반응형 레이아웃을 구현합니다",
            "dependencies": [
              2
            ],
            "details": "CSS Grid 또는 Flexbox를 사용한 3패널 레이아웃, 패널 크기 조정 가능한 스플리터 구현, 모바일/태블릿 화면에서의 반응형 동작 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "UI 라이브러리 적용 및 디자인 시스템 구축",
            "description": "Material-UI 또는 Ant Design을 적용하고 일관된 디자인 시스템을 구축합니다",
            "dependencies": [
              3
            ],
            "details": "UI 라이브러리 설치 및 테마 설정, 공통 컴포넌트 (Button, Input, Panel) 생성, 색상 팔레트 및 타이포그래피 정의, 다크/라이트 모드 지원",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "API 통신 설정 및 서비스 레이어 구현",
            "description": "백엔드 API와의 통신을 위한 Axios 설정과 서비스 레이어를 구현합니다",
            "dependencies": [
              4
            ],
            "details": "axios 패키지 설치, API 기본 URL 및 인터셉터 설정, problemService, submissionService 등 API 서비스 클래스 생성, 에러 처리 및 로딩 상태 관리",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "문제 관리 REST API 개발",
        "description": "문제 CRUD 및 카테고리별 조회 API 구현",
        "details": "Spring RestController 구현: GET /api/problems (전체 문제 목록, 페이징 지원), GET /api/problems/{id} (문제 상세), GET /api/problems/category/{category} (카테고리별 필터링). 문제 데이터 초기화: 원시 데이터 타입 5문제, 문자열 조작 5문제, 연산자 5문제, 제어문 5문제. ResponseEntity로 적절한 HTTP 상태 코드 반환. CORS 설정.",
        "testStrategy": "MockMvc를 사용한 컨트롤러 단위 테스트. 각 엔드포인트의 정상 응답 및 에러 처리 검증. 페이징 및 필터링 로직 테스트. JSON 응답 형식 검증.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "컨트롤러 기본 구조 설계",
            "description": "ProblemController 클래스 생성 및 기본 엔드포인트 정의",
            "dependencies": [],
            "details": "Spring Boot RestController 어노테이션을 사용하여 ProblemController 클래스를 생성합니다. 기본 매핑 경로(/api/problems)를 설정하고, GET, POST, PUT, DELETE 메서드를 위한 기본 구조를 정의합니다. ResponseEntity를 사용하여 적절한 HTTP 상태 코드를 반환하도록 설계합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "CRUD 엔드포인트 구현",
            "description": "문제 생성, 조회, 수정, 삭제를 위한 REST 엔드포인트 구현",
            "dependencies": [
              1
            ],
            "details": "GET /api/problems/{id}로 문제 상세 조회, GET /api/problems로 전체 문제 목록 조회, POST /api/problems로 새 문제 생성, PUT /api/problems/{id}로 문제 수정, DELETE /api/problems/{id}로 문제 삭제 기능을 구현합니다. 각 엔드포인트에서 적절한 검증과 예외 처리를 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "페이징 및 필터링 로직 구현",
            "description": "카테고리별 문제 조회와 페이지네이션 기능 구현",
            "dependencies": [
              2
            ],
            "details": "GET /api/problems/category/{category} 엔드포인트를 구현하여 카테고리별 문제 필터링을 제공합니다. Spring Data의 Pageable을 사용하여 페이지네이션을 구현하고, 정렬 기능도 추가합니다. 검색 파라미터와 필터 조건을 Query Parameter로 받아 처리하는 로직을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "샘플 데이터 초기화",
            "description": "각 카테고리별 초기 문제 데이터 생성 및 데이터베이스 초기화",
            "dependencies": [
              3
            ],
            "details": "원시 데이터 타입 5문제, 문자열 조작 5문제, 연산자 5문제, 제어문 5문제를 포함한 총 20개의 샘플 문제를 생성합니다. DataLoader 또는 CommandLineRunner를 사용하여 애플리케이션 시작 시 데이터베이스에 초기 데이터를 자동으로 삽입하도록 구현합니다. CORS 설정도 함께 추가합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "코드 실행 및 테스트 케이스 검증 시스템",
        "description": "제출된 코드를 컴파일하고 테스트 케이스에 대해 검증하는 핵심 엔진 구현",
        "details": "CodeExecutionService 구현: 코드 컴파일 (javax.tools.JavaCompiler 사용), Docker 컨테이너에서 실행, 테스트 케이스별 입력 제공 및 출력 검증. 실행 결과 모델: CompilationResult (success, errors), ExecutionResult (output, exitCode, executionTime). 큐 시스템 구현 (Spring @Async, CompletableFuture). 병렬 테스트 케이스 실행.",
        "testStrategy": "다양한 Java 코드 (정상, 컴파일 에러, 런타임 에러, 타임아웃) 실행 테스트. 테스트 케이스 통과/실패 판정 정확성 검증. 동시 실행 부하 테스트. 실행 시간 측정 정확도 테스트.",
        "priority": "high",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Java 컴파일러 통합 시스템 구현",
            "description": "javax.tools.JavaCompiler를 사용하여 동적 Java 코드 컴파일 기능을 구현하고 컴파일 결과를 처리하는 시스템을 개발합니다.",
            "dependencies": [],
            "details": "CompilerService 클래스 생성: javax.tools.JavaCompiler, JavaFileManager 사용. 메모리 기반 컴파일 (InMemoryJavaFileManager). CompilationResult 모델: success boolean, errors List<String>, warnings List<String>. 코드 검증 로직: 패키지 선언 체크, 클래스명 추출, 컴파일 오류 파싱. 샌드박스 제약사항 적용 (System.exit 금지 등).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Docker 실행 환경 연동 시스템 구현",
            "description": "Docker 컨테이너 내에서 안전하게 Java 코드를 실행할 수 있는 환경을 구축하고 컨테이너 관리 시스템을 개발합니다.",
            "dependencies": [
              1
            ],
            "details": "DockerExecutionService 구현: Docker Java API 또는 ProcessBuilder 사용. 실행 환경 설정: OpenJDK 베이스 이미지, 메모리/CPU 제한, 네트워크 격리. 컨테이너 라이프사이클 관리: 생성, 실행, 정리. 타임아웃 처리 및 리소스 정리. 실행 로그 수집 및 에러 핸들링.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "테스트 케이스 검증 로직 구현",
            "description": "테스트 케이스 입력을 제공하고 실행 결과를 예상 출력과 비교하여 정확성을 검증하는 시스템을 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "TestCaseValidator 구현: 입력 데이터 전달 (System.in 시뮬레이션), 출력 캡처 및 비교. 정확성 판정 로직: 문자열 정확 매칭, 공백/개행 정규화, 숫자 정밀도 처리. 부분 점수 계산 로직. 특수 케이스 처리: 무한루프 감지, 예외 처리, 출력 형식 검증.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "실행 결과 모델링 시스템 구현",
            "description": "코드 실행의 모든 결과 정보를 체계적으로 모델링하고 관리하는 데이터 구조를 설계합니다.",
            "dependencies": [
              3
            ],
            "details": "ExecutionResult 모델 설계: output String, exitCode int, executionTime long, memoryUsage long, error String. TestCaseResult 모델: testCaseId, passed boolean, actualOutput, expectedOutput, executionTime. SubmissionResult 모델: overall score, individual test results, compilation status. 결과 직렬화/역직렬화 (JSON). 결과 저장 및 조회 로직.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "비동기 처리 시스템 구현",
            "description": "코드 실행 요청을 비동기적으로 처리하고 큐 시스템을 통해 안정적인 작업 관리를 제공하는 시스템을 구현합니다.",
            "dependencies": [
              4
            ],
            "details": "AsyncExecutionService 구현: @Async 어노테이션, CompletableFuture 사용. 실행 큐 관리: ExecutorService, ThreadPoolTaskExecutor 설정. 작업 상태 추적: JobStatus enum (QUEUED, RUNNING, COMPLETED, FAILED). 진행률 모니터링 API: WebSocket 또는 Server-Sent Events. 큐 오버플로우 처리 및 우선순위 관리.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "병렬 실행 최적화 시스템 구현",
            "description": "여러 테스트 케이스를 병렬로 실행하고 시스템 리소스를 효율적으로 활용하는 최적화 시스템을 개발합니다.",
            "dependencies": [
              5
            ],
            "details": "ParallelExecutionOptimizer 구현: ForkJoinPool 사용, 테스트 케이스 병렬 실행. 리소스 관리: CPU 코어 수 기반 스레드 풀 크기 조정, 메모리 사용량 모니터링. 실행 스케줄링: 테스트 케이스 우선순위, 실행 시간 예측. 성능 튜닝: 배치 처리, 캐싱 전략. 모니터링 및 메트릭 수집.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "힌트 시스템 및 오류 메시지 처리",
        "description": "단계별 힌트 제공 시스템과 초보자 친화적 오류 메시지 변환 구현",
        "details": "HintService 구현: 문제별 3-5단계 힌트 저장 및 조회. 힌트 사용 추적. ErrorMessageTranslator: Java 컴파일러 오류를 초보자가 이해하기 쉬운 메시지로 변환 (예: 'cannot find symbol' → '변수나 메서드를 찾을 수 없습니다. 철자를 확인하세요'). 일반적인 실수 패턴 감지 (= vs ==, 세미콜론 누락 등).",
        "testStrategy": "각 문제의 힌트가 순차적으로 제공되는지 확인. 다양한 컴파일 오류에 대한 메시지 변환 테스트. 힌트 사용 횟수가 정확히 기록되는지 검증. 오류 위치(줄 번호) 정확성 테스트.",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "힌트 관리 서비스 구현",
            "description": "문제별 단계별 힌트를 저장하고 조회하는 HintService 클래스 구현",
            "dependencies": [],
            "details": "HintService 클래스 생성하여 문제별 3-5단계 힌트 저장 및 조회 기능 구현. 힌트 사용 횟수 추적 및 순차적 제공 로직 포함. @Service 어노테이션 사용하여 Spring 컴포넌트로 등록",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "오류 메시지 변환기 구현",
            "description": "Java 컴파일러 오류를 초보자 친화적 메시지로 변환하는 ErrorMessageTranslator 구현",
            "dependencies": [],
            "details": "ErrorMessageTranslator 클래스 생성하여 일반적인 Java 컴파일 오류('cannot find symbol', 'missing semicolon' 등)를 한국어 초보자 친화적 메시지로 변환. 정규식 패턴 매칭 사용하여 오류 타입 분류",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "패턴 기반 오류 감지 시스템",
            "description": "일반적인 프로그래밍 실수 패턴을 감지하는 시스템 구현",
            "dependencies": [
              2
            ],
            "details": "PatternDetector 클래스 구현하여 = vs == 실수, 세미콜론 누락, 괄호 불일치 등 초보자가 자주 하는 실수 패턴 감지. 코드 분석 로직과 패턴 매칭 알고리즘 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "사용자 친화적 메시지 생성 및 통합",
            "description": "감지된 오류와 패턴을 기반으로 학습 도움이 되는 메시지 생성 및 전체 시스템 통합",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "FriendlyMessageGenerator 클래스 구현하여 오류 위치(줄 번호) 정보와 함께 구체적인 해결 방법 제시. 힌트 시스템과 오류 처리 시스템을 통합하여 REST API 엔드포인트 제공",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "사용자 진행 상황 추적 시스템",
        "description": "문제 풀이 시도, 완료 상태, 소요 시간 등을 추적하는 시스템 구현",
        "details": "ProgressService 구현: 문제 시도 기록 (코드 제출 이력, 사용한 힌트), 문제별 해결 상태 업데이트, 카테고리별 점수 계산. UserProgressRepository 구현. REST API: GET /api/progress/{userId}, POST /api/progress/update. 세션 또는 JWT 기반 사용자 식별. 실시간 진행률 계산 로직.",
        "testStrategy": "사용자별 진행 상황이 정확히 저장되고 조회되는지 확인. 동시 업데이트 시 데이터 일관성 테스트. 카테고리별 점수 계산 정확성 검증. 성능 테스트 (대량 사용자 시뮬레이션).",
        "priority": "medium",
        "dependencies": [
          2,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ProgressService 기본 구조 설계 및 구현",
            "description": "사용자 진행 상황을 관리하는 핵심 서비스 클래스 설계 및 기본 메서드 구현",
            "dependencies": [],
            "details": "ProgressService 클래스 생성, 문제 시도 기록을 위한 recordAttempt() 메서드, 문제 해결 상태 업데이트를 위한 updateSolutionStatus() 메서드, 카테고리별 점수 계산을 위한 calculateCategoryScore() 메서드 구현. 서비스 레이어의 비즈니스 로직 정의 및 예외 처리 로직 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "UserProgressRepository 데이터 접근 계층 구현",
            "description": "사용자 진행 상황 데이터의 영속성을 담당하는 리포지토리 계층 구현",
            "dependencies": [
              1
            ],
            "details": "UserProgressRepository 인터페이스 정의, JPA Query 메서드를 통한 사용자별 진행 상황 조회, 문제별 시도 이력 저장 및 업데이트 쿼리, 카테고리별 통계 조회 메서드 구현. @Query 어노테이션을 활용한 복잡한 집계 쿼리 작성 및 트랜잭션 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "진행 상황 조회 및 업데이트 REST API 엔드포인트 구현",
            "description": "사용자 진행 상황을 조회하고 업데이트하는 REST API 컨트롤러 구현",
            "dependencies": [
              1,
              2
            ],
            "details": "ProgressController 클래스 생성, GET /api/progress/{userId} 엔드포인트로 사용자별 전체 진행 상황 조회, POST /api/progress/update 엔드포인트로 문제 시도 및 해결 상태 업데이트, JWT 기반 사용자 인증 및 권한 검증, DTO 클래스를 통한 요청/응답 데이터 구조 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "실시간 진행률 계산 로직 구현",
            "description": "사용자의 문제 해결 진행률을 실시간으로 계산하는 알고리즘 구현",
            "dependencies": [
              2
            ],
            "details": "카테고리별 완료율 계산 알고리즘, 전체 진행률 계산 로직, 문제 난이도에 따른 가중치 적용, 시간 기반 성과 측정 지표 계산. 캐싱 전략을 통한 성능 최적화 및 실시간 업데이트를 위한 이벤트 기반 계산 로직 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "동시성 처리 및 데이터 일관성 보장",
            "description": "다중 사용자 환경에서의 동시 업데이트 처리 및 데이터 무결성 보장",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "낙관적 잠금(Optimistic Locking)을 통한 동시성 제어, 트랜잭션 격리 수준 설정, 데이터베이스 제약조건 및 인덱스 최적화, 동시 업데이트 시 충돌 해결 전략 구현. Redis를 활용한 분산 락 구현 검토 및 성능 테스트를 통한 동시성 검증",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "카테고리 기반 네비게이션 및 학습 경로",
        "description": "문제를 카테고리별로 구성하고 추천 학습 순서를 제공하는 시스템 구현",
        "details": "카테고리 정의: 원시 타입, 문자열, 연산자, 제어문, 반복문, 배열, 메서드. 학습 경로 알고리즘: 선수 지식 기반 문제 추천, 난이도 점진적 상승. LearningPathService 구현. UI: 카테고리별 진행률 표시, 추천 다음 문제 하이라이트. 카테고리 완료 배지 시스템.",
        "testStrategy": "학습 경로가 논리적 순서를 따르는지 검증. 선수 문제 없이 고급 문제에 접근 시 경고 표시 확인. 카테고리별 필터링이 정확히 작동하는지 테스트. UI에서 진행률이 실시간 업데이트되는지 확인.",
        "priority": "low",
        "dependencies": [
          4,
          5,
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "카테고리 체계 정의 및 데이터 모델 구현",
            "description": "학습 경로를 위한 카테고리 시스템을 정의하고 데이터베이스 모델을 구현합니다.",
            "dependencies": [],
            "details": "Category 엔티티 생성 (원시 타입, 문자열, 연산자, 제어문, 반복문, 배열, 메서드). Problem 엔티티에 category 필드 연결. CategoryRepository 구현. 카테고리별 선수 관계 정의 (prerequisite mapping). 카테고리 순서 및 난이도 레벨 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "학습 경로 추천 알고리즘 구현",
            "description": "선수 지식 기반으로 다음 학습할 문제를 추천하는 알고리즘을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "LearningPathService 클래스 구현. 사용자의 현재 진행 상황 분석 로직. 선수 카테고리 완료 여부 확인. 난이도 점진적 상승 알고리즘. 추천 문제 우선순위 계산. REST API 엔드포인트 생성 (GET /api/learning-path/{userId}).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "카테고리 네비게이션 UI 컴포넌트 개발",
            "description": "카테고리별 문제 탐색과 학습 경로를 안내하는 사용자 인터페이스를 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "CategoryNavigation 컴포넌트 구현. 카테고리별 문제 목록 필터링. 추천 다음 문제 하이라이트 표시. 선수 문제 미완료 시 경고 메시지. 카테고리 완료 시 배지 표시. 반응형 네비게이션 메뉴 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "진행률 시각화 및 대시보드 구현",
            "description": "카테고리별 학습 진행률을 시각적으로 표현하는 대시보드를 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "ProgressDashboard 컴포넌트 구현. 카테고리별 진행률 차트 (원형, 막대 그래프). 전체 학습 진행률 요약. 학습 시간 통계 표시. 최근 해결한 문제 이력. 다음 추천 학습 경로 안내. Chart.js 또는 D3.js 활용한 데이터 시각화.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "프로덕션 배포 및 모니터링 설정",
        "description": "애플리케이션 배포 환경 구성과 성능 모니터링 시스템 구축",
        "details": "Docker Compose로 전체 스택 구성 (Spring Boot, PostgreSQL, React, Nginx). CI/CD 파이프라인 설정 (GitHub Actions 또는 Jenkins). 로깅 설정: 일반적인 구문 오류 패턴, 문제별 완료율, API 응답 시간. 모니터링: Prometheus + Grafana 또는 ELK 스택. 백업 전략: 데이터베이스 일일 백업. HTTPS 설정.",
        "testStrategy": "전체 시스템 통합 테스트. 부하 테스트로 동시 사용자 100명 처리 확인. 로그가 정확히 수집되고 분석 가능한지 검증. 장애 복구 시나리오 테스트. SSL 인증서 설정 확인.",
        "priority": "low",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Docker Compose 스택 구성",
            "description": "Spring Boot 애플리케이션, PostgreSQL, React 프론트엔드, Nginx 리버스 프록시를 포함한 전체 스택을 Docker Compose로 구성",
            "dependencies": [],
            "details": "docker-compose.yml 파일 작성, 각 서비스별 Dockerfile 작성, 환경 변수 설정, 네트워크 및 볼륨 구성, 프로덕션 환경용 이미지 최적화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "CI/CD 파이프라인 구축",
            "description": "GitHub Actions 또는 Jenkins를 활용한 자동화된 빌드, 테스트, 배포 파이프라인 구성",
            "dependencies": [
              1
            ],
            "details": "빌드 자동화 워크플로우 작성, 단위/통합 테스트 자동 실행, 도커 이미지 빌드 및 레지스트리 푸시, 스테이징/프로덕션 환경 자동 배포 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "로깅 시스템 구성",
            "description": "구조화된 로그 수집, 저장, 분석을 위한 ELK 스택 또는 중앙화된 로깅 시스템 구축",
            "dependencies": [
              1
            ],
            "details": "Logback 설정으로 JSON 형태 로그 출력, Logstash를 통한 로그 수집 및 파싱, Elasticsearch 인덱싱, Kibana 대시보드 구성, 애플리케이션 로그 레벨 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "모니터링 및 알림 시스템 설정",
            "description": "Prometheus + Grafana 또는 애플리케이션 성능 모니터링(APM) 도구를 활용한 실시간 모니터링 구성",
            "dependencies": [
              1
            ],
            "details": "메트릭 수집 설정 (CPU, 메모리, API 응답시간), Grafana 대시보드 구성, 알림 규칙 설정 (임계값 초과 시 Slack/이메일 알림), JVM 메트릭 및 비즈니스 메트릭 수집",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "백업 및 재해복구 전략 구현",
            "description": "데이터베이스 자동 백업, 백업 파일 저장소 관리, 재해복구 절차 수립",
            "dependencies": [
              1
            ],
            "details": "PostgreSQL 일일 자동 백업 스크립트 작성, AWS S3 또는 클라우드 스토리지 연동, 백업 파일 암호화 및 보관 정책 설정, 복구 테스트 절차 문서화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "보안 설정 및 HTTPS 구성",
            "description": "SSL/TLS 인증서 설정, 보안 헤더 구성, 방화벽 및 접근 제어 설정",
            "dependencies": [
              1,
              2
            ],
            "details": "Let's Encrypt SSL 인증서 자동 갱신 설정, Nginx 보안 헤더 구성 (HSTS, CSP 등), 데이터베이스 접근 제한, API 레이트 리미팅, 보안 취약점 스캔 자동화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-15T05:09:02.287Z",
      "updated": "2025-07-15T05:20:15.527Z",
      "description": "Tasks for master context"
    }
  }
}