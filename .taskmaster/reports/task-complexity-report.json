{
	"meta": {
		"generatedAt": "2025-07-15T05:10:02.273Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 1,
			"taskTitle": "프로젝트 구조 및 개발 환경 설정",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Spring Boot 3.x 프로젝트 초기 설정을 위한 세부 작업들로 분할: 프로젝트 생성, 의존성 구성, 데이터베이스 설정, Docker 환경 구성, 설정 파일 작성",
			"reasoning": "Spring Boot 프로젝트 초기 설정은 여러 기술 스택이 결합되어야 하는 기반 작업입니다. 각 구성 요소가 독립적으로 설정 가능하지만 상호 연동이 중요한 중간 난이도의 작업입니다."
		},
		{
			"taskId": 2,
			"taskTitle": "문제 데이터 모델 및 데이터베이스 스키마 설계",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "JPA 엔티티 설계를 체계적으로 분할: Problem 엔티티 설계, TestCase 엔티티 설계, UserProgress 엔티티 설계, ProblemAttempt 엔티티 설계, 연관관계 매핑, 데이터베이스 스키마 최적화",
			"reasoning": "복잡한 도메인 모델링과 JPA 연관관계 설정이 필요한 고난이도 작업입니다. 각 엔티티가 서로 연관되어 있어 신중한 설계가 필요하며, 성능과 확장성을 고려해야 합니다."
		},
		{
			"taskId": 3,
			"taskTitle": "보안 코드 실행 환경 구축",
			"complexityScore": 9,
			"recommendedSubtasks": 7,
			"expansionPrompt": "보안 코드 실행 환경을 단계별로 구축: Docker 이미지 생성, 리소스 제한 설정, 네트워크 격리 구성, Java Security Manager 설정, ProcessBuilder 구현, 입출력 스트림 처리, 보안 테스트",
			"reasoning": "보안이 핵심인 코드 실행 환경은 매우 높은 전문성이 필요합니다. Docker 컨테이너 보안, Java Security Manager, 시스템 리소스 제한 등 복합적인 보안 기술이 요구되는 최고 난이도 작업입니다."
		},
		{
			"taskId": 4,
			"taskTitle": "React 기반 웹 인터페이스 개발",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "React UI를 컴포넌트별로 개발: 프로젝트 설정, Monaco Editor 통합, 레이아웃 컴포넌트 구현, UI 라이브러리 적용, API 통신 설정",
			"reasoning": "Monaco Editor 통합과 반응형 UI 구성이 필요한 프론트엔드 개발 작업입니다. 컴포넌트 기반 개발과 외부 라이브러리 통합이 주요 과제인 중간 난이도 작업입니다."
		},
		{
			"taskId": 5,
			"taskTitle": "문제 관리 REST API 개발",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "REST API를 기능별로 구현: 컨트롤러 기본 구조 설계, CRUD 엔드포인트 구현, 페이징 및 필터링 로직, 샘플 데이터 초기화",
			"reasoning": "표준적인 Spring Boot REST API 개발로 비교적 잘 정립된 패턴을 따릅니다. CRUD 작업과 기본적인 페이징 구현이 주요 작업인 중간-하 난이도입니다."
		},
		{
			"taskId": 6,
			"taskTitle": "코드 실행 및 테스트 케이스 검증 시스템",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "코드 실행 엔진을 핵심 기능별로 구현: Java 컴파일러 통합, Docker 실행 환경 연동, 테스트 케이스 검증 로직, 실행 결과 모델링, 비동기 처리 시스템, 병렬 실행 최적화",
			"reasoning": "시스템의 핵심 엔진으로 컴파일, 실행, 검증이 모두 통합되어야 하는 고난이도 작업입니다. 비동기 처리와 병렬 실행까지 고려해야 하는 복잡한 시스템입니다."
		},
		{
			"taskId": 7,
			"taskTitle": "힌트 시스템 및 오류 메시지 처리",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "힌트 및 오류 처리 시스템을 기능별로 구현: 힌트 관리 서비스, 오류 메시지 변환기, 패턴 기반 오류 감지, 사용자 친화적 메시지 생성",
			"reasoning": "자연어 처리와 패턴 매칭이 포함된 사용자 경험 개선 작업입니다. 비즈니스 로직이 복합적이지만 각 기능이 독립적으로 구현 가능한 중간 난이도 작업입니다."
		},
		{
			"taskId": 8,
			"taskTitle": "사용자 진행 상황 추적 시스템",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "진행 상황 추적을 기능별로 구현: 진행 상황 서비스 설계, 데이터 저장 로직, API 엔드포인트 구현, 실시간 계산 로직, 동시성 처리",
			"reasoning": "사용자 상태 관리와 실시간 데이터 처리가 필요한 작업입니다. 동시성 이슈와 데이터 일관성을 고려해야 하는 중간 난이도의 백엔드 개발 작업입니다."
		},
		{
			"taskId": 9,
			"taskTitle": "카테고리 기반 네비게이션 및 학습 경로",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "학습 경로 시스템을 단계별로 구현: 카테고리 체계 정의, 학습 경로 알고리즘, UI 네비게이션 컴포넌트, 진행률 시각화",
			"reasoning": "추천 알고리즘과 UI 컴포넌트가 결합된 작업입니다. 비즈니스 로직은 복잡하지 않고 주로 프론트엔드 개발이 중심인 중간-하 난이도 작업입니다."
		},
		{
			"taskId": 10,
			"taskTitle": "프로덕션 배포 및 모니터링 설정",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "배포 및 운영 환경을 체계적으로 구성: Docker Compose 설정, CI/CD 파이프라인 구축, 로깅 시스템 구성, 모니터링 도구 설정, 백업 전략 수립, 보안 설정",
			"reasoning": "DevOps 전반에 걸친 종합적인 운영 환경 구축 작업입니다. 다양한 도구와 기술이 통합되어야 하며 운영 경험이 필요한 고난이도 작업입니다."
		}
	]
}